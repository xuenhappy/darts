// Configuration options
{
    //the services for segment plugin used
    "dservices": {
        "wtype.encoder": {
            "type": "LabelEncoder",
            "hx.file": "data/codes/type.hx.txt"
        },
        "wordpiece.dict": {
            "type": "WordPice",
            "base.dir": "data/models/codex"
        },
        "pinyin.encoder": {
            "type": "PinyinEncoder"
        }
    },
    //all the recognizers plugin
    "recognizers": {
        "inner.dict": {
            "type": "DictWordRecongnizer",
            "pbfile.path": "data/models/panda.pbs",
            "atom.mode": "false"
        },
        "pinyin.dict": {
            "type": "PinyinRecongnizer",
            "deps": {
                "pyin.encoder": "pinyin.encoder"
            }
        },
        "hmm.new.finder": {
            "type": "OnnxRecongnizer",
            "label.list": "",
            "model.path": "",
            "deps": {
                "wordpice.name": "wordpiece.dict"
            }
        }
    },
    // all the deciders plugins
    "deciders": {
        "ngram.decider": {
            "type": "BigramDecider",
            "dat.path": "data/models/bigram.mbs"
        },
        "mini.decider": {
            "type": "MinCoverDecider"
        },
        "onnx.decider": {
            "type": "OnnxDecider",
            "pmodel.path": "data/model/onnx/",
            "qmodel.path": "data/model/onnx/",
            "dep": {
                "wordpiece.name": "wordpiece.dict",
                "tencode.name": "wtype.encoder"
            }
        },
        "pyin.decider": {
            "type": "",
            "model.path": ""
        }
    },
    // all mode that the segment working
    "modes": {
        "fast": {
            "decider": "",
            "recognizers": []
        },
        "smart": {
            "decider": "",
            "recognizers": []
        },
        "pinyin": {
            "decider": "pinyin.embeder",
            "recognizers": [
                "pinyin.dict"
            ]
        }
    },
    //which model to load for default
    "default.mode": "smart"
}